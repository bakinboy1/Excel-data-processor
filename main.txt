package emailer;

import javax.swing.JFrame;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.net.URISyntaxException;

public class Main extends JFrame {

	private static final long serialVersionUID = 1L;
	int jj = 0;
	String state = "";
	String city = "";
	String department = "";
	String title = "";
	String entryLevel = "";
	String midLevel = "";
	String seniorLevel = "";
	String cityState = "";
	int cellJump = 0;
	int rowJump = 1;
	int arrPosition = 0;
	int lastRow = 0;
	int moduloLastRow = 0;
	int lastSheet = 0;
	int sheetAt = 0;
	boolean isRowEmpty;
	boolean last = false;

	// delay naming until reader starts
	public static String sheetName;
	public static XSSFSheet sheet;
	public static XSSFSheet consolidatedSheet;
	
	// connect program to desired excel file
	XSSFWorkbook consolidatedBook = new XSSFWorkbook();
	private static XSSFWorkbook workbook;

	/////////////////////
	// issue: TO DO
	//////////////////////
	// figure out how to iterate through all sheets
	// make each sheet into a seperate file, matching sheet name
	// clear out array after each sheet
	////////////////////////////////////////////

	public static void main(String[] args) throws URISyntaxException {

		Console.run2();
		// System.out.println("done");
	}

	public static Main main = new Main();

	// create arraylist to store excel file
	public void gogo() throws IOException {
		
		// temporary variables to store excel data for 1 row.
		// probably some way to make it more efficient than using nextCell. go by column
		// # or something
		// System.out.println(Console.content);
		FileInputStream excelFile;
		try {
			excelFile = new FileInputStream(new File(FileName.getFile()));

			workbook = new XSSFWorkbook(excelFile);
			lastSheet = workbook.getNumberOfSheets();
		} catch (FileNotFoundException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}

		while (jj < lastSheet) {
			XSSFWorkbook writebook = new XSSFWorkbook();
			// boolean to control print of last line only 1 time
			last = false;

			// set the name of the sheet in the write file to = sheet name at jj
			// positon in the read file
			sheetName = workbook.getSheetName(jj);

			// TESTING
			// System.out.println(sheetName);

			// assign actual xlsx sheet variable the right name
			sheet = writebook.createSheet(sheetName);
			consolidatedSheet = consolidatedBook.createSheet(sheetName);

			// gets workbook sheet, iterates through with jj
			Sheet datatypeSheet = workbook.getSheetAt(jj);
			arrPosition = 0;
			lastRow = 0;

			////////////
			lastRow = datatypeSheet.getLastRowNum();

			// System.out.println(lastRow);

			// get position of last row in page
			moduloLastRow = lastRow % 100;
			
			// System.out.println(workbook.getSheetName(jj));
			// initialize iterator for new rows
			Iterator<Row> iterator = datatypeSheet.iterator();

			// while there is a row with data it will keep going
			// System.out.println(lastRow - moduloLastRow);
			Arr.getArr().getList().clear();
			while (iterator.hasNext()) {
				state = "";
				city = "";
				// System.out.println(arrPosition + " " + lastRow);
				if (Arr.getArr().getList().size()-1 < 101 || arrPosition != lastRow) {

					// increment var reset. stores iterator position
					cellJump = 0;

					// initialize row iterator
					Row currentRow = iterator.next();

					// initialize cell iterator
					Iterator<Cell> cellIterator = currentRow.iterator();

					// while there is data in a cell, it will keep iterating to the right to the
					// next cell
					while (cellIterator.hasNext()) {

						// increments column/cell value
						cellJump++;

						// create cell object
						Cell currentCell = cellIterator.next();
						DataFormatter df = new DataFormatter();
						String cellValue = df.formatCellValue(currentCell);
						
						// if cell contains string & isnt null value, will cellJump to subgroup of if
						// statements
						if (currentCell.getCellType() == CellType.STRING
								|| currentCell.getCellType() == CellType.NUMERIC) {

							// changes cell data to string

							// depending on position, store in corresponding temp value
							// probably a better way to do this
							// //System.out.println(cellJump);
							if (cellJump == 1) {
								state = cellValue.substring(0, 1).toUpperCase() + cellValue.substring(1).toLowerCase();
							}

							if (cellJump == 2) {
								city = cellValue;
								//various data cleanups
								city=city.replace("metro", "").replace("pennsylvania", "")
										.replace(" ,", "").replace("county", "").replace("area", "").replace("/", "/ ").replace("-", "- ");
								
								city=capitalizeWord(city);
								//puts / and - back in original positions after capitalization fix
								city=city.replace("/ ", "/").replace("- ", "-");
								
								//handles orange county, where they still want county in
								if(city.contains("Orange")) {
									city=city+" County";
								}
								//ISSUE 
								
								
								
							}

							// if both fields are filled put a comma between
							else if (state != "" && city != "") {
								
								//puts a comma between city and state
								cityState = city +", " +state;
								
								//gets rid of blank space between state and comma
								cityState=cityState.replace(" , ", ", ");
								
								
							}

							// if one field is empty just combine
							else if (state != null || city != null) {
								cityState = state + city;
								cityState=cityState.replace("metro", "").replace("pennsylvania", "").replace(" ,", "").replace("county", "").replace("area", "");
								//cityState=capitalizeWord(cityState);
							}
							
							
							

							// cellJump 3= industry. skip it

							if (cellJump == 4 && cellValue != "") {
								department = cellValue;
							}

							if (cellJump == 5) {
								title = cellValue;
							}

							if (cellJump == 6) {
								entryLevel = cellValue;
							}

							if (cellJump == 7) {
								midLevel = cellValue;
							}

							if (cellJump == 8) {
								seniorLevel = cellValue;
							}

						}

						// if cellIncrementer encounters empty cell it breaks loop and moves down to
						// next row
						else if (currentCell.getStringCellValue() == null && cellJump > 4) {
						
							break;
						}
					}
					
					// adds temp data to arraylist
					Arr.getArr().getList().add(
							new Person(state, city, department, title, entryLevel, midLevel, seniorLevel, cityState));
					arrPosition++;
				}

				else {
					// if rowjump >0 rowjump=0
					if (arrPosition - Arr.getArr().getList().size() < 0) {
						rowJump = 0;
					} else {
						rowJump = arrPosition - Arr.getArr().getList().size();
					}
					// fill array
					// create the row and increment the row index
					printToExcel();
					 
					// reset
				}
			}

			// print last row of source file. janky AF but it works
			// printToExcel();

			// creates the actual file
			try {
				FileOutputStream outputStream = new FileOutputStream(
						Console.destinationFolderString + "\\" + sheetName + ".xlsx");
				// System.out.println(FileName.getFile() + sheetName + ".xlsx");
				writebook.write(outputStream);
				writebook.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}

			// consolidated file
			try {
				FileOutputStream outputStream = new FileOutputStream(
						Console.destinationFolderString + "\\" + " ConsolidatedData.xlsx");
				// System.out.println(FileName.getFile() + sheetName + ".xlsx");
				consolidatedBook.write(outputStream);

			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {  
				e.printStackTrace();
			}
			// end of page generator
			////////////////////////////////////////////////////////////////////////////////////////////////
			jj++;
		}
		consolidatedBook.close();
	}

	// print contents of arraylist to the excel file.
	public void printToExcel() {

		for (int i = 0; i <= Arr.getArr().getList().size(); i++) {

			
			Row r = sheet.createRow(rowJump);
			Row c = consolidatedSheet.createRow(rowJump);

			// If statement-prevents it from filling in blank cells counted from original
			// document with the last value repeatedly
			if (i < Arr.getArr().getList().size() - 1) {
				
				// checks to make sure row values aren't repeating- repeating indicates it hit
				// the last row
				if (Arr.getArr().getList().get(i).getEntryLevel() != Arr.getArr().getList().get(i + 1).getEntryLevel()
						&& Arr.getArr().getList().get(i).getMidLevel() != Arr.getArr().getList().get(i + 1).getMidLevel()
						&& Arr.getArr().getList().get(i).getSeniorLevel() != Arr.getArr().getList().get(i + 1).getSeniorLevel()) {
					// fills individual document

					// renames City,State to Location
					if (i == 0) {
						Arr.getArr().getList().get(i).setCityState("Location");
						Arr.getArr().getList().get(i).setDepartment("Department");
						Arr.getArr().getList().get(i).setTitle("Title");
						Arr.getArr().getList().get(i).setEntryLevel("Low");
						Arr.getArr().getList().get(i).setMidLevel("Mid");
						Arr.getArr().getList().get(i).setSeniorLevel("High");
						r.createCell(0).setCellValue(Arr.getArr().getList().get(i).getCityState());
						r.createCell(1).setCellValue(Arr.getArr().getList().get(i).getDepartment());
						r.createCell(2).setCellValue(Arr.getArr().getList().get(i).getTitle());
						r.createCell(3).setCellValue(Arr.getArr().getList().get(i).getEntryLevel());
						r.createCell(4).setCellValue(Arr.getArr().getList().get(i).getMidLevel());
						r.createCell(5).setCellValue(Arr.getArr().getList().get(i).getSeniorLevel());
						
						// fills consolidated document
						c.createCell(0).setCellValue(Arr.getArr().getList().get(i).getCityState());
						c.createCell(1).setCellValue(Arr.getArr().getList().get(i).getDepartment());
						c.createCell(2).setCellValue(Arr.getArr().getList().get(i).getTitle());
						c.createCell(3).setCellValue(Arr.getArr().getList().get(i).getEntryLevel());
						c.createCell(4).setCellValue(Arr.getArr().getList().get(i).getMidLevel());
						c.createCell(5).setCellValue(Arr.getArr().getList().get(i).getSeniorLevel());
						

					} else {
						r.createCell(0).setCellValue(Arr.getArr().getList().get(i).getCityState());
						r.createCell(1).setCellValue(Arr.getArr().getList().get(i).getDepartment());
						r.createCell(2).setCellValue(Arr.getArr().getList().get(i).getTitle());
						r.createCell(3).setCellValue(Arr.getArr().getList().get(i).getEntryLevel());
						r.createCell(4).setCellValue(Arr.getArr().getList().get(i).getMidLevel());
						r.createCell(5).setCellValue(Arr.getArr().getList().get(i).getSeniorLevel());
						
						// fills consolidated document
						c.createCell(0).setCellValue(Arr.getArr().getList().get(i).getCityState());
						c.createCell(1).setCellValue(Arr.getArr().getList().get(i).getDepartment());
						c.createCell(2).setCellValue(Arr.getArr().getList().get(i).getTitle());
						c.createCell(3).setCellValue(Arr.getArr().getList().get(i).getEntryLevel());
						c.createCell(4).setCellValue(Arr.getArr().getList().get(i).getMidLevel());
						c.createCell(5).setCellValue(Arr.getArr().getList().get(i).getSeniorLevel());
						
					}

				} else if (last == false) {
					// fills individual document
					r.createCell(0).setCellValue(Arr.getArr().getList().get(i).getCityState());
					r.createCell(1).setCellValue(Arr.getArr().getList().get(i).getDepartment());
					r.createCell(2).setCellValue(Arr.getArr().getList().get(i).getTitle());
					r.createCell(3).setCellValue(Arr.getArr().getList().get(i).getEntryLevel());
					r.createCell(4).setCellValue(Arr.getArr().getList().get(i).getMidLevel());
					r.createCell(5).setCellValue(Arr.getArr().getList().get(i).getSeniorLevel());

					// fills consolidated document
					c.createCell(0).setCellValue(Arr.getArr().getList().get(i).getCityState());
					c.createCell(1).setCellValue(Arr.getArr().getList().get(i).getDepartment());
					c.createCell(2).setCellValue(Arr.getArr().getList().get(i).getTitle());
					c.createCell(3).setCellValue(Arr.getArr().getList().get(i).getEntryLevel());
					c.createCell(4).setCellValue(Arr.getArr().getList().get(i).getMidLevel());
					c.createCell(5).setCellValue(Arr.getArr().getList().get(i).getSeniorLevel());
					last = true;
					System.out.println(Arr.getArr().getList().get(i).getCity() + " i position");
				}

//				System.out.println(Arr.getArr().getList().size() - 1);
//				System.out.println(lastRow + " last row");
//				System.out.println(Arr.getArr().getList().get(Arr.getArr().getList().size() - 1).getSeniorLevel()
//						+ " last arraylist position");
				
//				System.out.println(i + " i value");
			}
			
			rowJump++;
		}

		Arr.getArr().getList().clear();
	}
	public static String capitalizeWord(String str){  
	    String words[]=str.split("\\s");  
	    String capitalizeWord="";  
	    try {
	    for(String w:words){  
	    	
	        String first=w.substring(0,1);  
	        String afterfirst=w.substring(1);  
	        capitalizeWord+=first.toUpperCase()+afterfirst+" ";  
	    	
	    }
	    }
	    catch(Exception e) {
	    	System.out.println(str);
	    }
	    
	    return capitalizeWord.trim(); 
	    
	  
	}  
}
